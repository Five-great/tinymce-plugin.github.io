const n={data:()=>({dynamicTags:["标签一","标签二","标签三"],inputVisible:!1,inputValue:""}),methods:{handleClose(n){this.dynamicTags.splice(this.dynamicTags.indexOf(n),1)},showInput(){this.inputVisible=!0,this.$nextTick((n=>{this.$refs.saveTagInput.$refs.input.focus()}))},handleInputConfirm(){let n=this.inputValue;n&&this.dynamicTags.push(n),this.inputVisible=!1,this.inputValue=""}}};n.methods?n.methods.source=function(){return"<div\n  :key=\"tag\"\n  v-for=\"tag in dynamicTags\"\n  @close=\"handleClose(tag)\">\n  {{tag}}\n</div>\n<button  class=\"button-new-tag\"  @click=\"showInput\">+ New Tag</button>\n\n<style>\n  .el-tag + .el-tag {\n    margin-left: 10px;\n  }\n  .button-new-tag {\n    margin-left: 10px;\n    height: 32px;\n    line-height: 30px;\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n  .input-new-tag {\n    width: 90px;\n    margin-left: 10px;\n    vertical-align: bottom;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        dynamicTags: ['标签一', '标签二', '标签三'],\n        inputVisible: false,\n        inputValue: ''\n      };\n    },\n    methods: {\n      handleClose(tag) {\n        this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);\n      },\n\n      showInput() {\n        this.inputVisible = true;\n        this.$nextTick(_ => {\n          this.$refs.saveTagInput.$refs.input.focus();\n        });\n      },\n\n      handleInputConfirm() {\n        let inputValue = this.inputValue;\n        if (inputValue) {\n          this.dynamicTags.push(inputValue);\n        }\n        this.inputVisible = false;\n        this.inputValue = '';\n      }\n    }\n  }\n<\/script>\n"}:n.methods={source:()=>"<div\n  :key=\"tag\"\n  v-for=\"tag in dynamicTags\"\n  @close=\"handleClose(tag)\">\n  {{tag}}\n</div>\n<button  class=\"button-new-tag\"  @click=\"showInput\">+ New Tag</button>\n\n<style>\n  .el-tag + .el-tag {\n    margin-left: 10px;\n  }\n  .button-new-tag {\n    margin-left: 10px;\n    height: 32px;\n    line-height: 30px;\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n  .input-new-tag {\n    width: 90px;\n    margin-left: 10px;\n    vertical-align: bottom;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        dynamicTags: ['标签一', '标签二', '标签三'],\n        inputVisible: false,\n        inputValue: ''\n      };\n    },\n    methods: {\n      handleClose(tag) {\n        this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);\n      },\n\n      showInput() {\n        this.inputVisible = true;\n        this.$nextTick(_ => {\n          this.$refs.saveTagInput.$refs.input.focus();\n        });\n      },\n\n      handleInputConfirm() {\n        let inputValue = this.inputValue;\n        if (inputValue) {\n          this.dynamicTags.push(inputValue);\n        }\n        this.inputVisible = false;\n        this.inputValue = '';\n      }\n    }\n  }\n<\/script>\n"},n.methods?n.methods.source=function(){return"<div\n  :key=\"tag\"\n  v-for=\"tag in dynamicTags\"\n  @close=\"handleClose(tag)\">\n  {{tag}}\n</div>\n<button  class=\"button-new-tag\"  @click=\"showInput\">+ New Tag</button>\n\n<style>\n  .el-tag + .el-tag {\n    margin-left: 10px;\n  }\n  .button-new-tag {\n    margin-left: 10px;\n    height: 32px;\n    line-height: 30px;\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n  .input-new-tag {\n    width: 90px;\n    margin-left: 10px;\n    vertical-align: bottom;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        dynamicTags: ['标签一', '标签二', '标签三'],\n        inputVisible: false,\n        inputValue: ''\n      };\n    },\n    methods: {\n      handleClose(tag) {\n        this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);\n      },\n\n      showInput() {\n        this.inputVisible = true;\n        this.$nextTick(_ => {\n          this.$refs.saveTagInput.$refs.input.focus();\n        });\n      },\n\n      handleInputConfirm() {\n        let inputValue = this.inputValue;\n        if (inputValue) {\n          this.dynamicTags.push(inputValue);\n        }\n        this.inputVisible = false;\n        this.inputValue = '';\n      }\n    }\n  }\n<\/script>\n"}:n.methods={source:()=>"<div\n  :key=\"tag\"\n  v-for=\"tag in dynamicTags\"\n  @close=\"handleClose(tag)\">\n  {{tag}}\n</div>\n<button  class=\"button-new-tag\"  @click=\"showInput\">+ New Tag</button>\n\n<style>\n  .el-tag + .el-tag {\n    margin-left: 10px;\n  }\n  .button-new-tag {\n    margin-left: 10px;\n    height: 32px;\n    line-height: 30px;\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n  .input-new-tag {\n    width: 90px;\n    margin-left: 10px;\n    vertical-align: bottom;\n  }\n</style>\n\n<script>\n  export default {\n    data() {\n      return {\n        dynamicTags: ['标签一', '标签二', '标签三'],\n        inputVisible: false,\n        inputValue: ''\n      };\n    },\n    methods: {\n      handleClose(tag) {\n        this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);\n      },\n\n      showInput() {\n        this.inputVisible = true;\n        this.$nextTick(_ => {\n          this.$refs.saveTagInput.$refs.input.focus();\n        });\n      },\n\n      handleInputConfirm() {\n        let inputValue = this.inputValue;\n        if (inputValue) {\n          this.dynamicTags.push(inputValue);\n        }\n        this.inputVisible = false;\n        this.inputValue = '';\n      }\n    }\n  }\n<\/script>\n"},n.template='<Preview class="demo-attachment" :source="source()">\n                            <template v-slot:demo><div\n  :key="tag"\n  v-for="tag in dynamicTags"\n  @close="handleClose(tag)">\n  {{tag}}\n</div>\n<button  class="button-new-tag"  @click="showInput">+ New Tag</button></template>\n                            \n                          </Preview>';const t={components:{Demo0:n},template:"<h1>attachment</h1>\n<pre></pre><Demo0 />\n"};export{t as default};
